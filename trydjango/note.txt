- Setting after clone project:
    + Preferences > Project Interpreter > Install new VENV
    + Install from requirement file

-runserver:
python manage.py runserver
python manage.py runserver your_ip:port -> add your_ip to ALLOWED_HOSTS

-add envirment: python -m venv venv

-Add app: python manage.py startapp <app name>

- 1> make migration: python manage.py makemigrations <app name> -> don't need input appname

- 2> T-SQL: python manage.py sqlmigrate polls 0001
- 2> migration: python manage.py migrate

-create super user: python manage.py createsuperuser
    dtvthe
    123
-play with API: Query, see more with keyword 'shortcuts'
    python manager.py shell

    <ModelName>.objects.
                        get_object_or_404(modelName, <property> = <value>) | get(<property> = <value>)
                        all()
                        all()[0:N] => limit
                        all()[offset:N] => offset and limit
                        order_by('<property name>')
                        get(<property>__contains = '<keyword>')=> like
                        filter(<property> <operation> <value>)
                        create(<property> = <value>, ...)


- Query: see more with keyword 'shortcuts'
    <ModelName>.objects.
                        get_object_or_404(modelName, <property> = <value>)

- Shortcut function:
    render()
    render_to_response()
    redirect()
    get_object_or_404()
    get_list_or_404()

- urls:
    type: str, int, slug, uuid, path
    EX: blog/<int:year>/

- namespace:
    1> in urls.py: path('<custom urlname>/', include('<appname>.urls', namespace='<custom urlname>'))
    2> in <appname>.urls.py: app_name = '<appname>'

    in .py: return reverse('<app_name step 2>:index', something here)
    in .html: {% url '<app_name step 2>:index' %}

- ADD VIEW: data POST form submit:
    request.POST
    request.POST.get('<property>') => don't use

    form = <NameForm>.(request.POST or None)
    if form.is_valid():
        instance = form.save(commit=False)
        instance.save()

        form.cleaned_data.get('<property>') => get data after check validate

- EDIT VIEW: data post from submit:
    form = <NameForm>.(request.POST or None, instance = Object query)

- DELETE VIEW: data post from submit:
    object_or_404xxx.delete()

- redirect: redirect('namespace path format)
    => mesage just work when redirect

- template & inerit:
    1> base.html:
        {% block <blockname> %}
        {% endblock %}
    2> inheritxxx.html:
        {% extends "path to base.html" %}

        {% block <blockname> %}
        // html code here
        {% endblock %}
    *> include .html to layout: (partial layout so data control must in this function not other or from other function)
        {% include "xx.html" %}


- Static file: in managerpy
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "static"),
        ...
    ]


    {% load static %} or {% staticfiles %}
    <img src="{% static "my_app/example.jpg" %}" alt="My image">

- Static file serving upload files:
    1> in urls.py to to that:
        from django.conf import settings
        from django.conf.urls.static import static

        urlpatterns = [
            ...
        ] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

    2> in setting add:
        STATIC_ROOT = os.path.join(BASE_DIR, "your name folder")
        => the folder name must be "STATIC_ROOT"

    3> run cmd: python manage.py collectstatic

- Upload file: in form model add parameter: files=request.FILES or None

- Show img upload not using static, because them not static file, you should: {{ojb.image.url}}

- URL friendly: slug:

- Pre_Save : to do anything before save
    1> pre_save.connect(<name custom funciton excution>, sender=<ClassName to handle>)
    2> create funiton: name custom funciton excution -> set any properties to values

*FILTERS AND TAGS

keyword search: Built-in template tags and filters

- Template Filter: like pipe in Angular
    1> create directory must container in app directory
    2> create .py file:
        from django import template
        register = template.Library()

        @register.filter()
        def my_upper(value):
            return value.upper()
    3> .html file:
        {% load <name of file created at step 2 >  %}

        {{ ojb.name | my_upper }}

- Template Tag:

